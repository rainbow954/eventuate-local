buildscript {
    repositories {
       	mavenLocal()
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootPluginVersion")
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.5'
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'docker-compose'
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"

allprojects {
    group = "io.eventuate.local.java"
}

projects {

    license {
        header rootProject.file('src/license/HEADER')
    }
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
       	mavenLocal()
        mavenCentral()
        jcenter()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }

    dependencies {
        testCompile "junit:junit:4.12"
    }
    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: deployUrl)
                pom.project {
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }    

}

task aggregatedTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task in all subprojects
    reportOn subprojects*.test
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregated Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP
        dependsOn subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc

        source subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.source
        destinationDir file("$buildDir/docs/javadoc")
        classpath = files(subprojects.findAll { subproject -> subproject.plugins.hasPlugin(PublicModulePlugin) }.javadoc.classpath)
    }

    task("aggregateJavaDocsJar", type: org.gradle.api.tasks.bundling.Jar, dependsOn: project.aggregateJavaDocs) {
        classifier = 'javadoc'
        from 'build/docs/javadoc'
    }

    artifacts {
        archives project.aggregateJavaDocsJar
    }

}

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_CDC_VERSION", eventuateCdcImageVersion

    removeOrphans = true

    mysql {
        projectName = null
        useComposeFiles = ["docker-compose.yml"]
        removeContainers = project.ext.removeContainers
    }
}
